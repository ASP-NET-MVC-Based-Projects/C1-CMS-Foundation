/**
 * Composite plugin.
 */
new function () {

	var each = tinymce.each, Event = tinymce.dom.Event;

	function functionImageOnMouseMove(event) {
		if (window.event) {
			event = window.event;
		}

		var img = event.currentTarget;
		var rect = img.getClientRects()[0];

		var mousex = rect.right - event.clientX;
		var mousey = event.clientY - rect.top;

		var hasHoverClass = img.className.indexOf(' editHover') != -1;

		if (mousex < 81 && mousey < 40) {
			if (!hasHoverClass) {
				img.className += ' editHover';
			}
		}
		else {
			if (hasHoverClass) {
				img.className = img.className.replace(' editHover', '');
			}
		}
	}

	function functionImageOnMouseLeave(event) {
		var img = event.currentTarget;

		if (img.className.indexOf(' editHover') != -1) {
			img.className = img.className.replace(' editHover', '');
		}
	}

	function functionImageOnLoad(img) {
		img.className += " loaded";
		img.onmousemove = functionImageOnMouseMove;
		img.onmouseleave = functionImageOnMouseLeave;
	}

	tinymce.create("tinymce.plugins.CompositeRenderingPlugin", {

		/**
		 * @type {tinymce.Editor}
		 */
		editor: null,

		/**
		 * Get info
		 */
		getInfo: function () {
			return {
				longname: "Composite Rendering Plugin",
				author: "Composite A/S",
				authorurl: "http://www.composite.net",
				infourl: null,
				version: tinymce.majorVersion + "." + tinymce.minorVersion
			};
		},

		/**
		 * @param {tinymce.Editor} ed
		 * @param {string} url
		 */
		init: function (ed, url) {
			var FUNCTION_INSERT_P_BEFORE = 'INSERT_P_BEFORE';
			var FUNCTION_INSERT_P_AFTER = 'INSERT_P_AFTER';

			var FUNCTION_UNKNOWN = 'UNKNOWN';
			var state = FUNCTION_UNKNOWN;
			var stateElement = null;

			this.editor = ed;

			var self = this;
			ed.on('DblClick', function (e) {
				if (VisualEditorBinding.isFunctionElement(e.target)) {
					self._img = e.target;
					self.execCommand("compositeInsertRendering", true, "update");
					self._img = null;
				}
			});

			ed.on('Click', function (event) {
				if (VisualEditorBinding.isFunctionElement(event.target)) {
					var img = event.target;
					var rect = img.getClientRects()[0];
					var mousex = rect.right - event.clientX;
					var mousey = event.clientY - rect.top;
					if (mousex < 81 && mousey < 40) {
						self._img = event.target;
						ed.selection.select(event.target);
						self.execCommand("compositeInsertRendering", true, "update");
						self._img = null;
						event.stopPropagation();
						event.preventDefault();
					}
				}
			});

			ed.on('SetContent', function (e) {
				var images = new List(self.editor.getBody().querySelectorAll("img.compositeFunctionWysiwygRepresentation"));
				images.each(
					function (img) {
						self.updateFunctionEvents(img);
					});
			});

			ed.on('PastePostProcess', function (e) {
				var images = new List(e.node.querySelectorAll("img.compositeFunctionWysiwygRepresentation"));
				images.each(
					function (img) {
						var markup = img.getAttribute("data-markup");
						var tmp = document.createElement('div');
						tmp.innerHTML = ed.theme.editorBinding.getImageTagForFunctionCall(markup);

						var newImage = tmp.firstElementChild;
						img.parentNode.replaceChild(newImage, img);
						self.updateFunctionEvents(img);

					});
			});

			ed.on('Change', function (e) {
				function isEmpty(node) {
					if (node.nodeType == 3) {
						return /^(\s|&nbsp;|&#160;)*$/.test(node.nodeValue);
					} else if (node.nodeType == 3) {
						return node.nodeName.toLowerCase() == "br";
					}
					return false;
				}
				var images = new List(ed.getBody().querySelectorAll("p>img.compositeFunctionWysiwygRepresentation"));
				images.each(
				function (img) {
					prev = img.previousSibling;
					while (prev) {
						if (!isEmpty(prev))
							return true;
						prev = prev.previousSibling;
					}
					next = img.nextSibling
					while (next) {
						if (!isEmpty(next))
							return true;
						next = next.nextSibling;
					}
					img.parentNode.parentNode.replaceChild(img, img.parentNode);
				});

				self.updateAllCssPath();
			});
		},

		updateFunctionEvents: function (img) {
			if (img.naturalWidth > 0) {
				functionImageOnLoad(img);
			} else {
				img.onload = function () {
					functionImageOnLoad(img);
				}
			}
		},

		updateAllCssPath: function () {
			var self = this;
			var images = new List(this.editor.getBody().querySelectorAll("img.compositeFunctionWysiwygRepresentation"));
			images.each(
				function (img) {
					self.updateCssPath(img);
				});
		},

		/**
		 * @param {Node} img
		 */
		updateCssPath: function (img) {
			var dom = this.editor.dom;
			var src = img.getAttribute("src");
			var url = new Uri(src);
			var currentCss = url.getParam("css");
			var calsulatedCss = this.getCssPath(img.parentNode);
			if (calsulatedCss && calsulatedCss != currentCss) {
				img.onload = function () {
					functionImageOnLoad(img);
					// dom.addClass(img, "loaded")
				}
				dom.removeClass(img, "loaded")
				url.setParam("css", calsulatedCss);
				img.src = url.toString();
			}
		},


		/**
		 * @param {Node} node
		 */
		getCssPath: function (node) {
			var result = "";
			if (node == null || node.nodeName.toLowerCase() == "body")
				return result;
			var parentPath = this.getCssPath(node.parentNode);
			if (parentPath)
				result += parentPath + " ";
			result += node.nodeName.toLowerCase();
			if (node.className)
				result += "." + node.className.replace(/\s+/, '.');
			return result;
		},


		/**
		 * @param {string} cmd
		 * @param {boolean} ui
		 * @param {string} value
		 */
		execCommand: function (cmd, ui, value) {

			var result = false;
			var self = this;
			var editor = this.editor;
			var editorBinding = editor.theme.editorBinding;

			if (cmd == "compositeInsertRendering") {
				if (value == "update") {
					this._updateRendering();
				} else {
					this._insertRendering();
				}
				editorBinding.checkForDirty();
				result = true;
			} else if (cmd == "CompositeUpdateLayout") {
				this._updateLayout(this.editor.theme.editorBinding.getEffectiveWidth());
			}
			return result;
		},

		/**
		 * Update layout.
		 */
		_updateLayout: function (width) {
			var self = this;
			var dom = this.editor.dom;
			var images = new List(this.editor.getBody().querySelectorAll("img.compositeFunctionWysiwygRepresentation"));
			images.each(
				function (img) {
					var url = new Uri(img.src);
					var maxWidth = url.getParam("width");
					var imgWidth = img.naturalWidth;

					if (imgWidth > width || maxWidth == imgWidth && imgWidth < width) {
						url.setParam("width", width);
						dom.removeClass(img, "loaded")
						img.src = url.toString();
					}
				});
		},

		/**
		 * Insert rendering.
		 */
		_insertRendering: function () {

			this.editor.theme.enableDialogMode();

			var def = ViewDefinitions["Composite.Management.XhtmlDocumentFunctionSelectorDialog"];

			var self = this;
			def.handler = {
				handleDialogResponse: function (response, result) {
					if (response == Dialog.RESPONSE_ACCEPT) {

						var functionName = result.getFirst();
						var functionInfo = top.XhtmlTransformationsService.GetFunctionInfo(functionName);

						if (functionInfo.RequireConfiguration) {
							self._launchUpdateDialog(functionInfo.FunctionMarkup);
						} else {
							self.editor.theme.disableDialogMode()
							self._insertImgTag(functionInfo.FunctionMarkup);
						}
					} else {
						self.editor.theme.disableDialogMode()
					}
				}
			}
			Dialog.invokeDefinition(def);
		},



		/**
		 * Update rendering.
		 */
		_updateRendering: function () {

			var img = null;
			if (this._img != null) {
				img = this._img;
			} else {
				img = this.editor.selection.getNode();
			}
			if (img.nodeName.toLowerCase() == "img") {
				var markup = img.getAttribute("data-markup");
				this._launchUpdateDialog(markup);
			}
		},

		/**
		 * Launch update dialog.
		 * @param {string} markup
		 */
		_launchUpdateDialog: function (markup) {

			this.editor.theme.enableDialogMode();

			var self = this;
			var dialogHandler = {
				handleDialogResponse: function (response, result) {

					self.editor.theme.disableDialogMode();

					if (response == Dialog.RESPONSE_ACCEPT) {
						self._insertImgTag(result);
					}
				}
			}

			EditorBinding.invokeFunctionEditorDialog(markup, dialogHandler, "Composite.Core.Xml.XhtmlDocument, Composite")
		},

		/**
		 * Insert image tag from function markup.
		 * @param {string} markup
		 */
		_insertImgTag: function (markup) {
			var body = this.editor.getBody();
			var scrollTop = body.scrollTop;

			if (markup != "") {

				var html = this.editor.theme.editorBinding.getImageTagForFunctionCall(markup);
				this.editor.execCommand("mceInsertContent", false, html);
			} else {
				this.editor.execCommand("mceInsertContent", false, "");
			}

			if (scrollTop != body.scrollTop)
			{
				body.scrollTop = scrollTop;
			}
			this.editor.theme.editorBinding.checkForDirty();
		}
	});

	// Register plugin
	tinymce.PluginManager.add("compositerendering", tinymce.plugins.CompositeRenderingPlugin);
};
