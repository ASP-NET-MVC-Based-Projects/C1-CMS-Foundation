/**
 * Composite plugin.
 */
new function () {

	var each = tinymce.each, Event = tinymce.dom.Event;

	tinymce.create("tinymce.plugins.CompositeComponentPlugin", {

		/**
		 * @type {tinymce.Editor}
		 */
		editor: null,

		/**
		 * Get info
		 */
		getInfo: function () {
			return {
				longname: "Composite Component Plugin",
				author: "Composite A/S",
				authorurl: "http://www.composite.net",
				infourl: null,
				version: tinymce.majorVersion + "." + tinymce.minorVersion
			};
		},

		/**
		 * @param {tinymce.Editor} ed
		 * @param {string} url
		 */
		init: function (ed, url) {

			this.editor = ed;

			var self = this;
		},

		/**
		 * @param {string} cmd
		 * @param {boolean} ui
		 * @param {string} value
		 */
		execCommand: function (cmd, ui, value) {

			var result = false;
			var self = this;
			var editor = this.editor;
			var editorBinding = editor.theme.editorBinding;

			if (cmd == "compositeInsertComponent") {
				this._insertComponent();
				editorBinding.checkForDirty();
				result = true;
			}
			return result;
		},

		/**
		 * Insert rendering.
		 */
		_insertComponent: function () {

			this.editor.theme.enableDialogMode();

			var self = this;

			var definition = new DialogViewDefinition({
				handle: "ComponentsDialog",
				isMutable: true,
				position: Dialog.MODAL,
				url: "${root}/content/dialogs/postback/postbackdialog.aspx",
				argument: {
					"url": "${root}/console/?TEMP-COMPONENTS&pageId=component-selector-shim&containerClasses={context:containerClasses}",
					"list": new List(),
					"method": "get"
				},
				width: 1350,
				height: 780,
				handler: {
					handleDialogResponse: function (response, result) {
						if (response == Dialog.RESPONSE_ACCEPT) {
							isHtml = true;
							if (isHtml) {
								var componentDocument = new DOMParser().parseFromString(result.FunctionMarkup, "text/xml");
								self._resolveParametersAndInsert(componentDocument);
							}
						} else {
							self._insertResult();
						}
					}
				}
			});
			StageBinding.presentViewDefinition(definition, this.editor.theme.editorBinding);
		},


		/**
		 * @param {string} markup
		 */
		_resolveParametersAndInsert: function (componentDocument) {

			var self = this;

			resolver = new XPathResolver();
			resolver.setNamespacePrefixResolver({
				"f": "http://www.composite.net/ns/function/1.0"
			})

			var ffunction = resolver.resolve("//f:function", componentDocument);

			if (ffunction != null) {

				this._launchUpdateDialog(ffunction, {
					handleDialogResponse: function (response, result) {
						if (response == Dialog.RESPONSE_ACCEPT) {
							var functionhtml = self.editor.theme.editorBinding.getImageTagForFunctionCall(result);
							if (ffunction.parentNode == componentDocument) {
								self._insertResult(functionhtml);
							} else {
								ffunction.outerHTML = functionhtml; //TODO check
								self._resolveParametersAndInsert(componentDocument);
							}
						} else {
							self._insertResult();
						}
					}
				});

			} else {
				self._insertResult(componentDocument.firstChild.outerHTML);
			}
		},

		_insertResult: function (html) {

			this.editor.theme.disableDialogMode();
			if (html) {
				this.editor.execCommand("mceInsertRawHTML", true, html);
			}
		},

		/**
		 * Launch update dialog.
		 * @param {string} markup
		 */
		_launchUpdateDialog: function (ffunction, dialogHandler) {

			EditorBinding.invokeFunctionEditorDialog(ffunction.outerHTML, dialogHandler, "Composite.Core.Xml.XhtmlDocument, Composite", this.editor.theme.editorBinding)
		}
	});

	// Register plugin
	tinymce.PluginManager.add("compositecomponent", tinymce.plugins.CompositeComponentPlugin);
};
